name: Java CI

on: [push]

jobs:
  build-and-measure-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven and measure coverage
        run: mvn --batch-mode --update-snapshots verify
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.3
        with:
          paths: ${{ github.workspace }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 60


  sonar-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu' # Alternative distribution options are available.
          cache: maven
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify jacoco:report org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=FranziskaGreiner_QuizMaster

  cypress-e2e:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: 'docker.io/bitnami/postgresql:15.3.0'
        ports:
          - '5432:5432'
        env:
          POSTGRESQL_USERNAME: quizmaster
          POSTGRESQL_PASSWORD: LW3iDyg8V3skEYWk
          POSTGRESQL_DATABASE: quizmaster
          POSTGRESQL_TIMEZONE: Europe/Berlin
          POSTGRESQL_LOG_TIMEZONE: Europe/Berlin
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Start Database
        run: docker-compose up -d

      - name: Start Backend
        run: |
          mvn spring-boot:run &
          echo "Waiting for backend to start"
          while ! nc -z localhost 8080; do sleep 1; done
          echo "Backend started"
        working-directory: ./

      # Install NPM dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          build: npm run build
          start: 'npm start'
          wait-on: 'http://localhost:4200'
          wait-on-timeout: 120
          config-file: cypress.config.js
          working-directory: ./frontend/quizmaster-frontend
