name: Java CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Set up JDK and Node.js
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Build
      - name: Build backend
        run: mvn --batch-mode --update-snapshots clean package
      - name: Build frontend
        run: |
          cd frontend/quizmaster-frontend
          npm ci
          npm run build

  unit-and-integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Set up JDK and Node.js
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Backend tests and coverage
      - name: Backend tests
        run: mvn --batch-mode --update-snapshots test
      - name: Backend coverage
        run: mvn --batch-mode --update-snapshots jacoco:report
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Frontend tests and coverage
      - name: Frontend tests
        run: |
          cd frontend/quizmaster-frontend
          npm ci
          npm test
      - name: Frontend coverage
        run: |
          cd frontend/quizmaster-frontend
          npm test --no-watch --code-coverage

  sonar-backend-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # Set up JDK and Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
          cache: maven

      # Cache SonarCloud and Maven packages
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Build and analyze
      - name: Build and SonarCloud scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify jacoco:report org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=FranziskaGreiner_QuizMaster

  e2e-performance-security-tests:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: 'docker.io/bitnami/postgresql:15.3.0'
        ports:
          - '5432:5432'
        env:
          POSTGRESQL_USERNAME: quizmaster
          POSTGRESQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRESQL_DATABASE: quizmaster
          POSTGRESQL_TIMEZONE: Europe/Berlin
          POSTGRESQL_LOG_TIMEZONE: Europe/Berlin
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Set up JDK and cache Maven packages
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Start backend and frontend
      - name: Start Backend
        run: |
          mvn spring-boot:run &
          echo "Waiting for backend to start"
          while ! nc -z localhost 8080; do sleep 1; done
          echo "Backend started"
        working-directory: ./
        env:
          QUIZ_API_KEY: ${{ secrets.QUIZ_API_KEY }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        timeout-minutes: 2

      - name: Install NPM dependencies
        run: npm ci
        working-directory: ./frontend/quizmaster-frontend

      - name: Start frontend
        run: |
          npm start &
          echo "Waiting for frontend to start"
          while ! nc -z localhost 4200; do sleep 1; done
          echo "Frontend started"
        working-directory: ./frontend/quizmaster-frontend
        timeout-minutes: 2

      # Run e2e tests
      - name: Run cypress e2e test
        run: |
          cd ./frontend/quizmaster-frontend
          npx cypress run

      # Install k6 and run load test
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C780D0BDB1A69C86
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run k6 load test
        run: |
          cd ./src/test/performance
          k6 run load-test.js

  eslint-frontend-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - uses: sibiraj-s/action-eslint@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          eslint-args: '--ignore-path=.gitignore --quiet'
          extensions: 'js,jsx,ts,tsx'
          annotations: true
        working-directory: ./frontend/quizmaster-frontend

#      # Run Dastardly security scan
#      - name: Dastardly Scan Action
#        env:
#          JAVA_HOME: /usr/lib/jvm/adopt-17
#          PATH: ${{ env.JAVA_HOME }}/bin:${{ env.PATH }}
#        uses: PortSwigger/dastardly-github-action@main
#        with:
#          target-url: 'http://localhost:8080/quiz'

